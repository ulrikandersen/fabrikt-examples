openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: This is a sample server for a pet store.
  license:
    name: MIT
  contact:
    name: API Support
    url: https://example.com/support
    email: support@example.com
servers:
  - url: http://localhost:8080
    description: Development server
tags:
  - name: pets
  - name: user
paths:
  /user/me:
    get:
      summary: Profile of logged in user
      description: Retrieve the profile of the current user
      operationId: userProfile
      tags:
        - user
      security:
        - userAuthBasic: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
  /pets:
    get:
      summary: List all pets
      description: Retrieve a list of all the pets in the store.
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      description: Create a new pet.
      operationId: createPets
      tags:
        - pets
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      description: Load the details of the specified pet.
      operationId: showPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    userAuthBasic:
      type: http
      scheme: basic
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
        name:
          type: string
          maxLength: 5
        tag:
          type: string
    Pets:
      type: array
      maxItems: 100
      items:
        $ref: "#/components/schemas/Pet"
    UserProfile:
      type: object
      required:
        - name
        - email
        - onboardingStatus
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        onboardingStatus:
          type: string
          enum:
            - onboarded
            - partiallyOnboarded
            - notOnboarded
          example: notOnboarded
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
